(name 'Voyage-Tugrik-Server-Core-dkh.35' message 'abort and commit added to VOTugrikRepository on server-side ... does the real thing VOTugrikRepository>>createCollectionFor:  implemented in server ... update the VoyageExamplesDbCollection>>voyageSwitchToClassMapping' id '091155ed-1882-417b-ba2b-2b6db5781433' date '08/11/2016' time '08:01:00' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.34' message 'patch TDTopezServer>>evaluateSTONSmalltalk:voyageVariableBindings:, the entry in voyageVariableBindings for ''#dbServerClassName'' could be nil' id 'fa297b58-182c-44c3-8c79-30511bb71066' date '08/10/2016' time '16:29:17' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.33' message 'implement VOTugrikRepository>>newMaterializer (missing method)' id '8ae467c3-6b76-4056-ad88-bbd716662399' date '08/10/2016' time '15:16:01' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.32' message 'VODescriptionBuilder>>collectPragmasFor: is platform specific ... restore the original (and move to Voyage-Pharo-JSON) and implement VOGemStoneDescriptionBuilder>>collectPragmasFor:' id 'af451abb-fff5-4e70-81c1-220fb9787c70' date '08/10/2016' time '10:43:21' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.31' message 'pretty much finished up the server-side implementation of VOTugrikRepository ... you should be able to fiddle with the server/client scope of the standard Voyage api, including saves and queries ... the client-side repository settings are mapped to the session-specific singleton repository instnace on the server ... ' id 'cdd26151-339d-4a96-8617-e1fb1d8be320' date '08/10/2016' time '00:12:50' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.30' message 'create VOSessionTempsRepositoryContainer so that current session is simply managed on a session by session basis ... pick up excess args in variable bindings and used them in TDTopezServer>>evaluateSTONSmalltalk:voyageVariableBindings: to set the current repository to match the active repository on the client' id '016f2628-4d6b-4cb3-99ae-2ae6c91a3ad1' date '08/09/2016' time '22:09:54' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.29' message 'VOTugrikRepositoryServerTestCase : 20 run, 19 passes, 1 expected defects, 0 failures, 0 errors, 0 unexpected passes' id '512d9ef7-51ec-44d4-aac5-c82e44609375' date '08/09/2016' time '18:02:03' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.28' message '20 run, 17 passes, 1 expected defects, 2 failures, 0 errors, 0 unexpected passes' id '6394147d-fc65-4f87-8597-0f501462f732' date '08/09/2016' time '17:18:01' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.27' message 'VOTugrikRepositoryServerTestCase>>testSaveCircular now passes ... MQQuery support' id 'f3e40685-7830-4f7c-b096-cdc0aa4c3e1f' date '08/09/2016' time '16:35:06' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.26' message 'minor tweak' id '450ec5eb-ed8a-4697-8446-a1f38b377a57' date '08/09/2016' time '15:01:42' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.25' message 'VOTugrikRepositoryServerTestCase>>#testSaveCircularDictionaryWhere passes, which means that the server-side save: is working as expected' id '110e27a4-f260-42c1-b7db-3d98dc7c51b3' date '08/09/2016' time '14:24:12' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.24' message 'passing VOTugrikRepositoryServerTestCase>>#testSave and VOTugrikRepositoryServerTestCase>>#testSelectManyWithLimitAndOffset' id '1d5e93e9-dabd-427b-9f3f-9c365b4311ce' date '08/09/2016' time '11:14:18' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.23' message 'VOTugrikRepositoryServerTestCase>>testCount is passing ... on server' id '8eddefa1-e3b0-49aa-94db-5ccfffefab2f' date '08/09/2016' time '10:22:46' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.22' message 'start building up server-side VOTugrikRepository functionality; implement count and add test' id '29a92177-1f8c-4972-97c2-ac24371b57c1' date '08/09/2016' time '07:53:26' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.21' message 'expand test suite again; currently the tests that are passing either return a root object directly, wrapper for a root object, or collection of non-root objects ... root object (or wrapper) embedded in a collection is not being handled correctly at the moment ... possibly because the client-side materializer doesn''t look inside collections?' id '3db61bda-bbcb-48f1-be02-a82c24affac7' date '08/08/2016' time '17:26:16' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.20' message 'VOTugrikClassMappingTest tests passing: - testServerBlock01 - testServerBlock01Forwarding - testServerBlock02 - testServerSideMaterializationSerialization - testServerSideObjectStructure01the tests are somewhat stylized in order to work around short-comings on servier-side (or of framework) ... too early to tell ' id '90080101-8b2e-426d-a78f-35b582a0ea06' date '08/08/2016' time '15:12:27' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.19' message 'update comment for VOTugrikJSONSerializer and start looking at turning VoyageWrapperObject into a forwarder ...' id '56541924-2106-470e-83e1-8e800718f103' date '08/08/2016' time '11:11:48' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.18' message 'VOTugrikClassMappingTest>>testServerBlock01 and VOTugrikClassMappingTest>>testServerBlock02 are passing ... top-level returned object from a serverblock can now be (confirmed by tests): - a collection of repository roots - a repository root - a wrapper for a repository root ' id '0fb441a8-02eb-4a40-b129-3645ee4c8b5e' date '08/08/2016' time '11:03:21' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.17' message 'added logic for encountering a wrapper object REFERENCE (probably not that interesting), but still need to workout details of wrapper object as root returned object ... most likely needs to be special cased at the outset in VoyageClassMappingDb>>serializeRootObject:  ... by the by, I don''t think futures should be involved on the server we are serializing a fully formed object graph so no place holders should be required ... we are also serializing roots as references to avoid sucking entire db across wire' id 'fc536764-249d-4838-b1e5-4cf15e138b1d' date '08/08/2016' time '08:07:58' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.16' message 'VOTugrikClassMappingTest>>testServerSideMaterializationSerialization is passing .. VOTestPilot instance on client passed to server and back again preserving identity on client ...' id '6c418fe6-5711-4261-985d-cb7772b1807b' date '08/08/2016' time '07:13:22' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.15' message 'checkpoint ... just getting started with server-side serialization' id '65495bf8-3422-4612-a7c5-bc7d1481db91' date '08/07/2016' time '20:51:51' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.14' message 'rename object creation to materialization' id '900997a0-f383-4a2e-b6d9-6cd168c27660' date '08/07/2016' time '15:31:27' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.13' message 'fix some typos...' id '490d6bce-f5c6-4135-9809-7b2ce99efe11' date '08/07/2016' time '15:15:00' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.12' message 'now move object creation from VoyageClassMappingDbCollection to VoyageClassMappingDb' id '311081da-2e73-4a8d-ae53-1849f1e17a4d' date '08/07/2016' time '15:06:09' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.11' message 'move the object creation methods to the instance side of TugrikDbCollection and VoyageClassMappingDbCollection' id '25946b5c-a1f5-469b-b55f-b27ce1eb199c' date '08/07/2016' time '14:14:16' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.10' message 'materialize object using Magritte on server-side to produce an instance of the proper class... when serializing a wrapped object we need to add back in the instanceOf, _id, etc. meta data so that client can materialize correctly ... need to use magritte to produce the serialized json dictionary, since we want to be able to handle root object references ....' id 'a699db13-b1d4-4a01-b7fb-a13aebb1bfaf' date '08/06/2016' time '14:29:16' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.9' message 'expand VOTugrikClassMappingTest>>testServerBlock a little bit; add _wrapper dynamicInstVar to voyage root instances, so that we can arrange to include oid when shipping to client' id '73312bf1-02c3-4b43-af2d-a3d16f59c0d5' date '08/05/2016' time '20:02:34' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.8' message 'Insert the VoyageWrapperObject for handling class mapping ... expect server blocks to fail ... but might be promising otherwise and if I can arrange for the wrapper to only be visible directly in the top-level collection and repository queries unwrap it will probably be accepable ... the wrappers can truly be made immutable once they''ve been created (modulo migration concerns)' id '58c91f57-7724-4d7b-be54-97e124a52083' date '08/05/2016' time '17:25:22' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.7' message 'add VoyageWrapper object and get VOTugrikClassMappingTest>>testServerSideMaterializationSerialization to pass ...' id '996f99f0-6bba-4684-b6fb-0456e58bc7bf' date '08/05/2016' time '17:00:44' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.6' message 'baby steps for full-fledged class mapping support --- client-side test' id '39349fee-d2e8-4128-9c6e-1984d7593862' date '08/05/2016' time '16:09:42' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.5' message 'starting to explore Magritte-based materialization/serialization on server ... start with incoming and outgoing objects for server blocks to keep it simple and isolated' id 'e70c588e-0d9d-4126-8de7-56454c5b4937' date '08/05/2016' time '15:33:12' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.4' message 'implement FastUUIDGenerator>>makeSeed and UUIDGenerator>>makeSeed' id '2580b494-625c-4e4c-bb5f-d34a89c09219' date '08/05/2016' time '14:23:59' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.3' message 'Tugrik server will have it''s own version seed generator; add Voyage-Tugrik-Server-Tests package; VORepository class>>defaultVersionGenerator is a good idea ... unqlite uses this and I want to use this (on the server); tugrik client needs its own serializer tests' id 'd55b8006-fa83-4a9a-ae0f-f6bbf9dc2a33' date '08/05/2016' time '12:08:00' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.2' message 'extension methods being supplied by Voyage-Model-Core package as of now ' id 'd0c0b15a-8c57-4cf3-a015-8e9c58dff374' date '08/05/2016' time '11:24:46' author 'dkh' ancestors ((name 'Voyage-Tugrik-Server-Core-dkh.1' message 'rename server-side classes and packages to Tuygrik' id '38b565e4-6fc2-4a75-adf4-45962314f769' date '08/04/2016' time '16:11:16' author 'dkh' ancestors () stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())